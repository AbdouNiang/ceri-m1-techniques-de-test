version: 2.1
orbs: 
   codecov: codecov/codecov@3

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - codecov/upload
      - run:
          name: Generate Javadoc
          command: mvn site
      - run:
          name: Generate and Deploy Javadoc
          command: |
            mvn javadoc:javadoc
            git config --global user.email "abdou.niang@alumni.univ-avignon.fr"
            git config --global user.name "AbdouNiang"
            git clone --branch=gh-pages --depth=1 git@github.com:AbdouNiang/ceri-m1-techniques-de-test.git gh-pages
            rm -rf gh-pages/*
            cp -R target/site/apidocs/* gh-pages/
            cd gh-pages
            git add .
            git commit -m "Update Javadoc"
            git push origin master
 
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    #okkk
    jobs:
      - build-and-test:
          filters:
            branches:
              only: master
     
